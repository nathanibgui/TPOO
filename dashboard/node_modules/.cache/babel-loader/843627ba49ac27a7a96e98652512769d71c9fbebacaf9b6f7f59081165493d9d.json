{"ast":null,"code":"import moment from 'moment';\nimport axios from 'axios';\n//import {response} from \"express\";\n\nexport default {\n  name: 'GestionUtilisateurs',\n  data() {\n    return {\n      formData: {\n        email: '',\n        username: ''\n      },\n      user: {\n        email: '',\n        username: '',\n        idUser: ''\n      },\n      data: {\n        time: '',\n        status: '',\n        user_id: ''\n      },\n      clocks: {\n        time: '',\n        status: '',\n        user_id: ''\n      },\n      userId: '',\n      userExists: false,\n      // Ajout d'une variable pour suivre si l'utilisateur existe\n      email: '',\n      // Variable pour stocker l'e-mail de l'utilisateur\n      username: '',\n      // Variable pour stocker le nom d'utilisateur de l'utilisateur\n      showErrorMessage: false,\n      isEditing: false\n    };\n  },\n  computed: {},\n  methods: {\n    handel_change() {\n      this.isEditing = true;\n    },\n    async createUser() {\n      try {\n        let dataUser = this.user;\n        // Effectuer une requête POST pour créer un nouvel utilisateur\n        const response = await axios.post('http://localhost:4000/api/users', {\n          \"user\": dataUser\n        });\n        console.log('Utilisateur créé avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après la création de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la création de l\\'utilisateur :', error);\n      }\n    },\n    async createClock() {\n      try {\n        const currentDate = new Date();\n        const data = {\n          time: currentDate,\n          status: true,\n          user_id: this.userId\n        };\n        console.log(data);\n        const response = await axios.post('http://localhost:4000/api/clocks', {\n          clock: data\n        });\n        console.log('Clock créée avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après la suppression de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la creation de la clock :', error);\n      }\n    },\n    formattedDate(date) {\n      return moment(date).format('H:mm');\n    },\n    async getClock() {\n      try {\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\n        const response = await axios.get(`http://localhost:4000/api/clocks/${this.userId}`);\n        this.clocks = response.data;\n        console.log('Détails du temps de travail pointé --> récupérés avec succès:', response.data);\n        console.log('Détails du ffff:', this.clocks[0]['time']);\n\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la récupération des temps de travail :', error);\n      }\n    },\n    async editUser(id) {\n      try {\n        const dataToUpdate = {\n          email: this.formData.email,\n          username: this.formData.username\n        };\n\n        // Effectuer une requête PUT pour mettre à jour l'utilisateur existant\n        const response = await axios.put(`http://localhost:4000/api/users/${id}`, {\n          user: dataToUpdate\n        });\n        console.log('Utilisateur mis à jour avec succès :', response.data);\n        // Mettez en œuvre la logique nécessaire après la mise à jour de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour de l\\'utilisateur :', error);\n      }\n    },\n    async getUser() {\n      try {\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\n        const response = await axios.get(`http://localhost:4000/api/users/${this.userId}`);\n        console.log('Détails de l\\'utilisateur récupérés avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails de l\\'utilisateur :', error);\n      }\n    },\n    async supprimerUser(id) {\n      try {\n        // Effectuer une requête DELETE pour supprimer l'utilisateur\n        const response = await axios.delete(`http://localhost:4000/api/users/${id}`);\n        console.log('Utilisateur supprimé avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après la suppression de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la suppression de l\\'utilisateur :', error);\n      }\n    },\n    async submitUser() {\n      const email = this.formData.email;\n      const username = this.formData.username;\n      try {\n        // Effectuez une requête à l'API pour vérifier si l'utilisateur existe\n        const response = await axios.get(`http://localhost:4000/api/users?email=${email}&username=${username}`);\n        if (response.data) {\n          this.userExists = true;\n          this.email = email;\n          this.username = username;\n          this.showErrorMessage = false;\n          // Récupérer l'ID de l'utilisateur\n          this.userId = response.data.id;\n          this.getUser();\n          this.getClock();\n        } else {\n          this.userExists = false;\n          this.showErrorMessage = true;\n          // L'utilisateur n'existe pas dans la base de données\n          console.log(response.data);\n        }\n      } catch (error) {\n        this.userExists = false;\n        this.showErrorMessage = true;\n      }\n    }\n  }\n};","map":{"version":3,"names":["moment","axios","name","data","formData","email","username","user","idUser","time","status","user_id","clocks","userId","userExists","showErrorMessage","isEditing","computed","methods","handel_change","createUser","dataUser","response","post","console","log","error","createClock","currentDate","Date","clock","formattedDate","date","format","getClock","get","editUser","id","dataToUpdate","put","getUser","supprimerUser","delete","submitUser"],"sources":["C:\\Users\\ASUS\\dashboard\\src\\components\\GestionUtilisateurs.vue"],"sourcesContent":["<template>\r\n  <!-- Contenu du composant Utilisateur ici -->\r\n  <div class=\"home-page\">\r\n\r\n    <div class=\"navbar\">\r\n      <div class=\"container\">\r\n        <router-link to=\"/\" class=\"nav-link\" exact>\r\n          Dashboard\r\n        </router-link>\r\n        <router-link to=\"/orders\" class=\"nav-link\">\r\n          Orders\r\n        </router-link>\r\n        <router-link to=\"/products\" class=\"nav-link\">\r\n          Products\r\n        </router-link>\r\n        <router-link to=\"/customers\" class=\"nav-link\">\r\n          Customers\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"container mt-4\" v-if=\"!userExists\">\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-6\">\r\n          <h2 class=\"text-center\"> Connexion </h2>\r\n            <form @submit.prevent=\"submitUser\">\r\n                  <div class=\"user-form\">\r\n                    <div class=\"form-group\">\r\n                      <label for=\"email\">Email :</label>\r\n                      <input type=\"email\" id=\"email\" v-model=\"formData.email\" required>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                      <label for=\"username\">Nom d'utilisateur :</label>\r\n                      <input type=\"text\" id=\"username\" v-model=\"formData.username\" required>\r\n                    </div>\r\n                    <button  type=\"submit\">Récupérer les données utilisateur</button>\r\n                  </div>\r\n            </form>\r\n        </div>\r\n        <div class=\"col-6\" >\r\n          <h2 class=\"text-center\"> Inscription </h2>\r\n          <form class=\"  mx-auto user-form\">\r\n            <div class=\"form-group\">\r\n              <label for=\"email\">Email :</label>\r\n              <input type=\"email\" class=\"form-control\" id=\"email\" v-model=\"user.email\" placeholder=\" entre votre email \"/>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"email\">Nom :</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"nom\" v-model=\"user.username\"  placeholder=\" entre votre nom \"/>\r\n            </div>\r\n            <div class=\"form-group \">\r\n              <button class=\"btn btn-success w-100\" type=\"button\" @click=\"createUser()\">Creation</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"userExists\" class=\"user-info\">\r\n      <div class=\"container\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h2 class=\"text-center\">Informations de l'utilisateur </h2>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table table-bordered mt-3 text-center\">\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Nom d'utilisateur </th>\r\n                  <th>Email</th>\r\n                  <th>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td>{{ userId }}</td>\r\n                <td>{{ username }}</td>\r\n                <td>{{ email }}</td>\r\n                <td class=\"d-flex  justify-content-center gap-3 \">\r\n<!--                  <RouterLink :to=\"{path:'/users/'+userId+'/edit'}\" class=\"btn btn-success\" >Modifier</RouterLink>-->\r\n                  <button @click=\"createClock(this.userId)\" class=\"btn btn-success\">Je Badge !</button>\r\n                  <button @click=\"handel_change\" class=\"btn btn-info\" >Modifier</button>\r\n                  <button @click=\"supprimerUser(this.userId)\" class=\"btn btn-danger\">Supprimer</button>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"userExists\" class=\"user-info\">\r\n      <div class=\"container\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h2 class=\"text-center\">Votre journée </h2>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table table-bordered mt-3 text-center\">\r\n              <thead>\r\n              <tr>\r\n                <th>Temps </th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr v-for=\"(clock, index) in this.clocks\" :key=\"index\">\r\n                <td>{{ formattedDate(clock.time) }}</td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n    <!-- Formulaire de modification -->\r\n    <div class=\"user-info\" v-if=\"isEditing\">\r\n      <div class=\"container\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h2 class=\"text-center\">Modifier l'utilisateur</h2>\r\n          </div>\r\n\r\n          <form >\r\n            <div class=\"user-form\">\r\n              <div class=\"form-group\">\r\n                <label for=\"email\">Email :</label>\r\n                <input type=\"email\" id=\"email\" v-model=\"formData.email\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"username\">Nom d'utilisateur :</label>\r\n                <input type=\"text\" id=\"username\" v-model=\"formData.username\" required>\r\n              </div>\r\n              <button class=\"btn btn-info\" type=\"button\" @click=\"editUser(this.userId)\">Modifier </button>\r\n            </div>\r\n          </form>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"user-info\" v-if=\"showErrorMessage\">\r\n      <p>L'utilisateur n'existe pas dans la base de données.</p>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n<script>\r\n\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\n//import {response} from \"express\";\r\n\r\n\r\nexport default {\r\n  name: 'GestionUtilisateurs',\r\n  data() {\r\n    return {\r\n      formData: {\r\n        email: '',\r\n        username: '',\r\n      },\r\n      user: {\r\n        email: '',\r\n        username: '',\r\n        idUser: '',\r\n      },\r\n      data : {\r\n        time : '',\r\n        status:'',\r\n        user_id: '',\r\n      },\r\n      clocks : {\r\n        time : '',\r\n        status:'',\r\n        user_id: '',\r\n      },\r\n      userId: '',\r\n      userExists: false, // Ajout d'une variable pour suivre si l'utilisateur existe\r\n      email: '', // Variable pour stocker l'e-mail de l'utilisateur\r\n      username: '', // Variable pour stocker le nom d'utilisateur de l'utilisateur\r\n      showErrorMessage: false,\r\n      isEditing: false,\r\n    };\r\n  },\r\n  computed: {\r\n  },\r\n  methods: {\r\n    handel_change() {\r\n      this.isEditing = true\r\n    },\r\n    async createUser() {\r\n      try {\r\n        let dataUser = this.user;\r\n        // Effectuer une requête POST pour créer un nouvel utilisateur\r\n        const response = await axios.post('http://localhost:4000/api/users', {\"user\": dataUser})\r\n        console.log('Utilisateur créé avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la création de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la création de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    async createClock() {\r\n      try {\r\n        const currentDate = new Date();\r\n        const data = {\r\n          time : currentDate,\r\n          status:true,\r\n          user_id: this.userId,\r\n        }\r\n        console.log(data);\r\n        const response = await axios.post('http://localhost:4000/api/clocks',{clock: data});\r\n        console.log('Clock créée avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la suppression de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la creation de la clock :', error);\r\n      }\r\n    },\r\n    formattedDate(date) {\r\n      return moment(date).format('H:mm');\r\n    },\r\n    async getClock() {\r\n      try {\r\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\r\n        const response = await axios.get(`http://localhost:4000/api/clocks/${this.userId}`);\r\n        this.clocks = response.data;\r\n        console.log('Détails du temps de travail pointé --> récupérés avec succès:', response.data);\r\n        console.log('Détails du ffff:', this.clocks[0]['time']);\r\n\r\n\r\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des temps de travail :', error);\r\n      }\r\n    },\r\n    async editUser(id) {\r\n      try {\r\n        const dataToUpdate = {\r\n          email: this.formData.email,\r\n          username: this.formData.username,\r\n        };\r\n\r\n        // Effectuer une requête PUT pour mettre à jour l'utilisateur existant\r\n        const response = await axios.put(`http://localhost:4000/api/users/${id}`, {user: dataToUpdate});\r\n\r\n        console.log('Utilisateur mis à jour avec succès :', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la mise à jour de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la mise à jour de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    async getUser() {\r\n      try {\r\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\r\n        const response = await axios.get(`http://localhost:4000/api/users/${this.userId}`);\r\n        console.log('Détails de l\\'utilisateur récupérés avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des détails de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    async supprimerUser(id) {\r\n      try {\r\n        // Effectuer une requête DELETE pour supprimer l'utilisateur\r\n        const response = await axios.delete(`http://localhost:4000/api/users/${id}`);\r\n        console.log('Utilisateur supprimé avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la suppression de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la suppression de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    async submitUser() {\r\n      const email = this.formData.email;\r\n      const username = this.formData.username;\r\n      try {\r\n        // Effectuez une requête à l'API pour vérifier si l'utilisateur existe\r\n        const response = await axios.get(`http://localhost:4000/api/users?email=${email}&username=${username}`);\r\n\r\n        if (response.data) {\r\n          this.userExists = true;\r\n          this.email = email;\r\n          this.username = username;\r\n          this.showErrorMessage = false;\r\n          // Récupérer l'ID de l'utilisateur\r\n          this.userId = response.data.id;\r\n\r\n          this.getUser();\r\n          this.getClock();\r\n        } else {\r\n          this.userExists = false;\r\n          this.showErrorMessage = true;\r\n          // L'utilisateur n'existe pas dans la base de données\r\n          console.log(response.data);\r\n        }\r\n      } catch (error) {\r\n        this.userExists = false;\r\n        this.showErrorMessage = true;\r\n      }\r\n    },\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Styles pour la page d'accueil */\r\n\r\n/* Style pour la barre de navigation */\r\n.navbar {\r\n  background-color: beige;\r\n  padding: 15px 0; /* Ajoutez un espace autour du texte dans la navbar */\r\n  width: 100%; /* Faites en sorte que la navbar occupe toute la largeur de son conteneur */\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Ajoute une légère ombre */\r\n}\r\n\r\n/* Style pour les liens dans la navbar */\r\n.navbar a {\r\n  margin: 0 20px; /* Ajoute un espace entre chaque lien */\r\n  color: black; /* Couleur du texte des liens */\r\n  text-decoration: none; /* Supprime la soulignement des liens */\r\n  font-weight: bold; /* Mettez en gras le texte des liens */\r\n  font-size: 1.2rem; /* Taille de la police des liens */\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/* Changez la couleur du texte des liens au survol */\r\n.navbar a:hover {\r\n  color: darkred; /* Couleur du texte des liens au survol */\r\n}\r\n\r\n\r\n\r\n/* Vos autres styles restants... */\r\n\r\n/* Style pour le formulaire utilisateur */\r\n.user-form {\r\n  max-width: 400px;\r\n  margin: 20px auto;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n  background-color: #fff;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-form .form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.user-form .form-group label {\r\n  display: block;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.user-form .form-group input[type=\"email\"],\r\n.user-form .form-group input[type=\"text\"] {\r\n  width: calc(100% - 20px);\r\n  padding: 8px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.user-form button[type=\"submit\"] {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.user-form button[type=\"submit\"]:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}