{"ast":null,"code":"import moment from 'moment';\n//import axios from 'axios';\n\nexport default {\n  name: 'GestionUtilisateurs',\n  data() {\n    return {\n      selected: this.$route.params.city || '',\n      // Utilisez le paramètre de l'URL comme valeur initiale\n      options: ['Paris', 'Nice', 'Barcelone'],\n      meteoDonnee: null\n    };\n  },\n  computed: {\n    formattedDate() {\n      return moment().locale('fr').format('LL');\n    }\n  },\n  methods: {\n    // Méthodes exigées\n    createUser() {\n      // créer un utilisateur\n    },\n    updateUser() {\n      // mettre à jour l'utilisateur\n    },\n    getUser() {\n      //obtenir les détails de l'utilisateur\n    },\n    supprimerUser() {\n      // supprimer l'utilisateur\n    },\n    search(ville) {\n      // Logique de recherche avec la ville ici (par exemple, appel à une API)\n      // Mettez à jour votre composant avec les résultats de la recherche\n\n      // Dans cet exemple, générons une température aléatoire entre 1 et 32\n      const randomTemperature = Math.floor(Math.random() * 32) + 1;\n      switch (ville) {\n        case 'Paris':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        case 'Nice':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        case 'Barcelone':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        default:\n          this.meteoDonnee = null;\n      }\n    }\n  },\n  watch: {\n    '$route.params.city': function (newCity) {\n      this.selected = newCity || ''; // Mettez à jour la ville sélectionnée lorsque le paramètre de l'URL change\n      this.search(newCity); // Effectuez la recherche avec la nouvelle ville\n    }\n  }\n};","map":{"version":3,"names":["moment","name","data","selected","$route","params","city","options","meteoDonnee","computed","formattedDate","locale","format","methods","createUser","updateUser","getUser","supprimerUser","search","ville","randomTemperature","Math","floor","random","temperature","watch","$route.params.city","newCity"],"sources":["C:\\Users\\ASUS\\dashboard\\src\\components\\GestionUtilisateurs.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Contenu du composant Utilisateur ici --><p>znnznz</p>\r\n\r\n\r\n    <div class=\"current-weather\">\r\n      <select v-model=\"selected\" class=\"city-dropdown\">\r\n        <option disabled value=\"\">Sélectionner une ville</option>\r\n        <option v-for=\"option in options\" :key=\"option\">\r\n          {{ option }}\r\n        </option>\r\n      </select>\r\n\r\n      <div class=\"search-button\">\r\n        <p></p>\r\n        <button><router-link  :to=\"'/currentWeather/' + selected\">Voir la météo</router-link></button>\r\n\r\n        <button @click=\"fetchData\">Charger les données</button>\r\n        <!--<button v-if=\"meteoDonnee==null\" @click=\"search(selected)\">Rechercher</button> -->\r\n      </div>\r\n\r\n\r\n\r\n      <!-- Affichez les informations seulement si search() a été appelé et que les données sont disponibles -->\r\n      <div v-if=\"meteoDonnee\" class=\"weather-info\">\r\n        <h2>Où : {{ meteoDonnee.city }}</h2>\r\n        <p v-if=\"meteoDonnee.temperature\">Température : {{ meteoDonnee.temperature }} °C</p>\r\n        <p v-if=\"!meteoDonnee.temperature\">Impossible de récuperer la méteo actuel de {{ meteoDonnee.city }}</p>\r\n        <p>Date : {{ formattedDate }}</p>\r\n\r\n\r\n        <chart-maker v-if=\"meteoDonnee\" v-bind:params=\"chartParams\">\r\n        </chart-maker>\r\n\r\n      </div>\r\n\r\n      <div  v-if=\"meteoDonnee\" class=\"search-button\">\r\n        <p></p>\r\n        <button><router-link  :to=\"'/currentWeather/' \">Retour à l'accueil</router-link></button>\r\n        <!--<button v-if=\"meteoDonnee==null\" @click=\"search(selected)\">Rechercher</button> -->\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport moment from 'moment';\r\n//import axios from 'axios';\r\n\r\n\r\nexport default {\r\n  name: 'GestionUtilisateurs',\r\n  data() {\r\n    return {\r\n      selected: this.$route.params.city || '', // Utilisez le paramètre de l'URL comme valeur initiale\r\n      options: ['Paris', 'Nice', 'Barcelone'],\r\n      meteoDonnee: null\r\n    };\r\n  },\r\n  computed: {\r\n    formattedDate() {\r\n      return moment().locale('fr').format('LL');\r\n    },\r\n  },\r\n  methods: {\r\n    // Méthodes exigées\r\n    createUser() {\r\n      // créer un utilisateur\r\n    },\r\n    updateUser() {\r\n      // mettre à jour l'utilisateur\r\n    },\r\n    getUser() {\r\n      //obtenir les détails de l'utilisateur\r\n    },\r\n    supprimerUser() {\r\n      // supprimer l'utilisateur\r\n    },\r\n    search(ville) {\r\n      // Logique de recherche avec la ville ici (par exemple, appel à une API)\r\n      // Mettez à jour votre composant avec les résultats de la recherche\r\n\r\n      // Dans cet exemple, générons une température aléatoire entre 1 et 32\r\n      const randomTemperature = Math.floor(Math.random() * 32) + 1;\r\n\r\n      switch (ville) {\r\n        case 'Paris':\r\n          this.meteoDonnee = { temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        case 'Nice':\r\n          this.meteoDonnee = {temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        case 'Barcelone':\r\n          this.meteoDonnee = { temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        default:\r\n          this.meteoDonnee = null;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    '$route.params.city': function(newCity) {\r\n      this.selected = newCity || ''; // Mettez à jour la ville sélectionnée lorsque le paramètre de l'URL change\r\n      this.search(newCity); // Effectuez la recherche avec la nouvelle ville\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styles spécifiques au composant Utilisateur ici */\r\n</style>\r\n"],"mappings":"AAiDA,OAAOA,MAAK,MAAO,QAAQ;AAC3B;;AAGA,eAAe;EACbC,IAAI,EAAE,qBAAqB;EAC3BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,IAAG,IAAK,EAAE;MAAE;MACzCC,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,CAAC;MACvCC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,OAAOV,MAAM,CAAC,CAAC,CAACW,MAAM,CAAC,IAAI,CAAC,CAACC,MAAM,CAAC,IAAI,CAAC;IAC3C;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,UAAUA,CAAA,EAAG;MACX;IAAA,CACD;IACDC,UAAUA,CAAA,EAAG;MACX;IAAA,CACD;IACDC,OAAOA,CAAA,EAAG;MACR;IAAA,CACD;IACDC,aAAaA,CAAA,EAAG;MACd;IAAA,CACD;IACDC,MAAMA,CAACC,KAAK,EAAE;MACZ;MACA;;MAEA;MACA,MAAMC,iBAAgB,GAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;MAE5D,QAAQJ,KAAK;QACX,KAAK,OAAO;UACV,IAAI,CAACX,WAAU,GAAI;YAAEgB,WAAW,EAAEJ,iBAAiB;YAAEd,IAAI,EAAEa;UAAM,CAAC,EAAE;UACpE;QACF,KAAK,MAAM;UACT,IAAI,CAACX,WAAU,GAAI;YAACgB,WAAW,EAAEJ,iBAAiB;YAAEd,IAAI,EAAEa;UAAM,CAAC,EAAE;UACnE;QACF,KAAK,WAAW;UACd,IAAI,CAACX,WAAU,GAAI;YAAEgB,WAAW,EAAEJ,iBAAiB;YAAEd,IAAI,EAAEa;UAAM,CAAC,EAAE;UACpE;QACF;UACE,IAAI,CAACX,WAAU,GAAI,IAAI;MAC3B;IACF;EACF,CAAC;EACDiB,KAAK,EAAE;IACL,oBAAoB,EAAE,SAAAC,CAASC,OAAO,EAAE;MACtC,IAAI,CAACxB,QAAO,GAAIwB,OAAM,IAAK,EAAE,EAAE;MAC/B,IAAI,CAACT,MAAM,CAACS,OAAO,CAAC,EAAE;IACxB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}