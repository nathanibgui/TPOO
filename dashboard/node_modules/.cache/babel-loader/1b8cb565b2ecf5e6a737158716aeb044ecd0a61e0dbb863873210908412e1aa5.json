{"ast":null,"code":"import moment from 'moment';\nimport axios from 'axios';\nexport default {\n  name: 'GestionUtilisateurs',\n  data() {\n    return {\n      selected: this.$route.params.city || '',\n      // Utilisez le paramètre de l'URL comme valeur initiale\n      username: '',\n      email: '',\n      options: ['Paris', 'Nice', 'Barcelone'],\n      meteoDonnee: null\n    };\n  },\n  computed: {\n    formattedDate() {\n      return moment().locale('fr').format('LL');\n    }\n  },\n  methods: {\n    // Méthodes exigées\n    createUser() {\n      // créer un utilisateur\n    },\n    updateUser() {\n      // mettre à jour l'utilisateur\n    },\n    getUser() {\n      //obtenir les détails de l'utilisateur\n    },\n    supprimerUser() {\n      // supprimer l'utilisateur\n    },\n    login(users) {\n      // Logique de recherche avec la ville ici (par exemple, appel à une API)\n      // Mettez à jour votre composant avec les résultats de la recherche\n\n      // Dans cet exemple, générons une température aléatoire entre 1 et 32\n      //const randomTemperature = Math.floor(Math.random() * 32) + 1;\n\n      switch (users) {\n        case 'Paris':\n          this.usersDonnee = {\n            email: '',\n            username: ''\n          }; // Remplacez cela par les données réelles\n          break;\n        case 'Nice':\n          this.usersDonnee = {\n            email: '',\n            username: ''\n          }; // Remplacez cela par les données réelles\n          break;\n        default:\n          this.meteoDonnee = null;\n      }\n    },\n    async submitUser() {\n      const email = this.formData.email;\n      const username = this.formData.username;\n      try {\n        // Effectuez une requête à l'API pour vérifier si l'utilisateur existe\n        const response = await axios.get(`http://localhost:4000/api/users?email=${email}&username=${username}`);\n        if (response.data) {\n          // L'utilisateur existe dans la base de données\n          console.log(response.data);\n        } else {\n          // L'utilisateur n'existe pas dans la base de données\n          console.log(response.data);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la vérification de l\\'utilisateur :', error);\n      }\n    },\n    fetchData() {\n      const requestUrl = 'https://api.openweathermap.org/data/2.5/weather?lat=44.34&lon=10.99&appid=4dcc2218a9bf517e2c98a9da0ca721cd%27;';\n\n      // Fonction de réussite (resolveCallback) en gros response est un objet ou tout est stocke il faut utiliser\n      // un systeme de .data pour recuperer les données\n\n      const resolveCallback = response => {\n        // Traite les données de la réponse ici\n        console.log(response.data);\n      };\n\n      // Fonction d'échec (rejectCallback)\n      const rejectCallback = error => {\n        console.error('Erreur lors de la requête :', error);\n      };\n\n      // Effectuer la requête Axios avec les callbacks de réussite et d'échec\n      axios.get(requestUrl).then(resolveCallback, rejectCallback);\n    },\n    search(ville) {\n      // Logique de recherche avec la ville ici (par exemple, appel à une API)\n      // Mettez à jour votre composant avec les résultats de la recherche\n\n      // Dans cet exemple, générons une température aléatoire entre 1 et 32\n      const randomTemperature = Math.floor(Math.random() * 32) + 1;\n      switch (ville) {\n        case 'Paris':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        case 'Nice':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        case 'Barcelone':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        default:\n          this.meteoDonnee = null;\n      }\n    }\n  },\n  watch: {\n    '$route.params.city': function (newCity) {\n      this.selected = newCity || ''; // Mettez à jour la ville sélectionnée lorsque le paramètre de l'URL change\n      this.search(newCity); // Effectuez la recherche avec la nouvelle ville\n    }\n  }\n};","map":{"version":3,"names":["moment","axios","name","data","selected","$route","params","city","username","email","options","meteoDonnee","computed","formattedDate","locale","format","methods","createUser","updateUser","getUser","supprimerUser","login","users","usersDonnee","submitUser","formData","response","get","console","log","error","fetchData","requestUrl","resolveCallback","rejectCallback","then","search","ville","randomTemperature","Math","floor","random","temperature","watch","$route.params.city","newCity"],"sources":["C:\\Users\\ASUS\\dashboard\\src\\components\\GestionUtilisateurs.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Contenu du composant Utilisateur ici --><p>znnznz</p>\r\n\r\n\r\n    <div class=\"current-weather\">\r\n      <select v-model=\"selected\" class=\"city-dropdown\">\r\n        <option disabled value=\"\">Sélectionner une ville</option>\r\n        <option v-for=\"option in options\" :key=\"option\">\r\n          {{ option }}\r\n        </option>\r\n      </select>\r\n\r\n      <div class=\"search-button\">\r\n        <p></p>\r\n        <button><router-link  :to=\"'/users/' + selected\">Voir la météo</router-link></button>\r\n\r\n        <button @click=\"fetchData\">Charger les données</button>\r\n        <!--<button v-if=\"meteoDonnee==null\" @click=\"search(selected)\">Rechercher</button> -->\r\n      </div>\r\n\r\n\r\n      <p>Username: {{ username }}</p>\r\n      <input v-model=\"username\" placeholder=\"edit me\" />\r\n\r\n      <p>Email: {{ email }}</p>\r\n      <input v-model=\"email\" placeholder=\"edit me\" />\r\n\r\n      <div class=\"search-button\">\r\n        <p></p>\r\n        <button><router-link  :to=\"'/users?email='+ email +'&username='+ username \">Rechercher l'utillisateur</router-link></button>\r\n\r\n        <!--<button v-if=\"meteoDonnee==null\" @click=\"search(selected)\">Rechercher</button> -->\r\n      </div>\r\n\r\n      <!-- Affichez les informations seulement si search() a été appelé et que les données sont disponibles -->\r\n      <div v-if=\"meteoDonnee\" class=\"weather-info\">\r\n        <h2>Où : {{ meteoDonnee.city }}</h2>\r\n        <p v-if=\"meteoDonnee.temperature\">Température : {{ meteoDonnee.temperature }} °C</p>\r\n        <p v-if=\"!meteoDonnee.temperature\">Impossible de récuperer la méteo actuel de {{ meteoDonnee.city }}</p>\r\n        <p>Date : {{ formattedDate }}</p>\r\n\r\n\r\n        <chart-maker v-if=\"meteoDonnee\" v-bind:params=\"chartParams\">\r\n        </chart-maker>\r\n\r\n      </div>\r\n\r\n\r\n\r\n      <!-- Affichez les informations seulement si search() a été appelé et que les données sont disponibles -->\r\n      <div v-if=\"meteoDonnee\" class=\"weather-info\">\r\n        <h2>Où : {{ meteoDonnee.city }}</h2>\r\n        <p v-if=\"meteoDonnee.temperature\">Température : {{ meteoDonnee.temperature }} °C</p>\r\n        <p v-if=\"!meteoDonnee.temperature\">Impossible de récuperer la méteo actuel de {{ meteoDonnee.city }}</p>\r\n        <p>Date : {{ formattedDate }}</p>\r\n\r\n\r\n        <chart-maker v-if=\"meteoDonnee\" v-bind:params=\"chartParams\">\r\n        </chart-maker>\r\n\r\n      </div>\r\n\r\n      <div  v-if=\"meteoDonnee\" class=\"search-button\">\r\n        <p></p>\r\n        <button><router-link  :to=\"'/users' \">Retour à l'accueil</router-link></button>\r\n        <!--<button v-if=\"meteoDonnee==null\" @click=\"search(selected)\">Rechercher</button> -->\r\n      </div>\r\n\r\n      <form @submit.prevent=\"submitUser\">\r\n        <div class=\"user-form\">\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Email :</label>\r\n            <input type=\"email\" id=\"email\"  v-model=\"formData.email\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"username\">Nom d'utilisateur :</label>\r\n            <input type=\"text\" id=\"username\"  v-model=\"formData.username\" required>\r\n          </div>\r\n          <button type=\"submit\">Créer un utilisateur</button>\r\n        </div>\r\n      </form>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default {\r\n  name: 'GestionUtilisateurs',\r\n  data() {\r\n    return {\r\n      selected: this.$route.params.city || '', // Utilisez le paramètre de l'URL comme valeur initiale\r\n      username: '',\r\n      email:'',\r\n      options: ['Paris', 'Nice', 'Barcelone'],\r\n      meteoDonnee: null\r\n    };\r\n  },\r\n  computed: {\r\n    formattedDate() {\r\n      return moment().locale('fr').format('LL');\r\n    },\r\n  },\r\n  methods: {\r\n    // Méthodes exigées\r\n    createUser() {\r\n      // créer un utilisateur\r\n    },\r\n    updateUser() {\r\n      // mettre à jour l'utilisateur\r\n    },\r\n    getUser() {\r\n      //obtenir les détails de l'utilisateur\r\n    },\r\n    supprimerUser() {\r\n      // supprimer l'utilisateur\r\n    },\r\n    login(users) {\r\n      // Logique de recherche avec la ville ici (par exemple, appel à une API)\r\n      // Mettez à jour votre composant avec les résultats de la recherche\r\n\r\n      // Dans cet exemple, générons une température aléatoire entre 1 et 32\r\n      //const randomTemperature = Math.floor(Math.random() * 32) + 1;\r\n\r\n      switch (users) {\r\n        case 'Paris':\r\n          this.usersDonnee = { email: '', username: '' }; // Remplacez cela par les données réelles\r\n          break;\r\n        case 'Nice':\r\n          this.usersDonnee = {email: '', username: '' }; // Remplacez cela par les données réelles\r\n          break;\r\n        default:\r\n          this.meteoDonnee = null;\r\n      }\r\n    },\r\n    async submitUser() {\r\n      const email = this.formData.email;\r\n      const username = this.formData.username;\r\n      try {\r\n        // Effectuez une requête à l'API pour vérifier si l'utilisateur existe\r\n        const response = await axios.get(`http://localhost:4000/api/users?email=${email}&username=${username}`);\r\n\r\n        if (response.data) {\r\n          // L'utilisateur existe dans la base de données\r\n          console.log(response.data);\r\n        } else {\r\n          // L'utilisateur n'existe pas dans la base de données\r\n          console.log(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la vérification de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    fetchData() {\r\n      const requestUrl = 'https://api.openweathermap.org/data/2.5/weather?lat=44.34&lon=10.99&appid=4dcc2218a9bf517e2c98a9da0ca721cd%27;';\r\n\r\n      // Fonction de réussite (resolveCallback) en gros response est un objet ou tout est stocke il faut utiliser\r\n      // un systeme de .data pour recuperer les données\r\n\r\n      const resolveCallback = response => {\r\n        // Traite les données de la réponse ici\r\n        console.log(response.data);\r\n      };\r\n\r\n      // Fonction d'échec (rejectCallback)\r\n      const rejectCallback = error => {\r\n        console.error('Erreur lors de la requête :', error);\r\n      };\r\n\r\n      // Effectuer la requête Axios avec les callbacks de réussite et d'échec\r\n      axios.get(requestUrl).then(resolveCallback, rejectCallback);\r\n\r\n    },\r\n    search(ville) {\r\n      // Logique de recherche avec la ville ici (par exemple, appel à une API)\r\n      // Mettez à jour votre composant avec les résultats de la recherche\r\n\r\n      // Dans cet exemple, générons une température aléatoire entre 1 et 32\r\n      const randomTemperature = Math.floor(Math.random() * 32) + 1;\r\n\r\n      switch (ville) {\r\n        case 'Paris':\r\n          this.meteoDonnee = { temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        case 'Nice':\r\n          this.meteoDonnee = {temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        case 'Barcelone':\r\n          this.meteoDonnee = { temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        default:\r\n          this.meteoDonnee = null;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    '$route.params.city': function(newCity) {\r\n      this.selected = newCity || ''; // Mettez à jour la ville sélectionnée lorsque le paramètre de l'URL change\r\n      this.search(newCity); // Effectuez la recherche avec la nouvelle ville\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.current-weather {\r\n  max-width: 300px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.city-dropdown {\r\n  margin-bottom: 10px;\r\n  padding: 8px;\r\n  font-size: 16px;\r\n  width: 100%;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\n.search-button button {\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.search-button button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.weather-info {\r\n  margin-top: 20px;\r\n  font-size: 18px;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}