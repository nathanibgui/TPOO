{"ast":null,"code":"let nbClick = 0;\nimport moment from 'moment';\nimport axios from 'axios';\nimport 'moment-timezone';\nimport { onMounted } from 'vue';\nimport * as bootstrap from 'bootstrap';\nimport 'bootstrap';\nwindow.bootstrap = bootstrap;\nlet myModal;\nexport default {\n  setup() {\n    onMounted(() => {\n      myModal = new bootstrap.Modal(document.getElementById('staticBackdrop'));\n    });\n    const showModel = () => {\n      console.log(\"tes\");\n      myModal.show();\n    };\n    return {\n      // ...autres variables et méthodes que vous retournez\n      showModel\n    };\n  },\n  name: 'GestionUtilisateurs',\n  data() {\n    return {\n      formData: {\n        email: '',\n        username: ''\n      },\n      user: {\n        email: '',\n        username: '',\n        idUser: ''\n      },\n      data: {\n        time: '',\n        status: '',\n        user_id: ''\n      },\n      clocks: {\n        time: '',\n        status: '',\n        user_id: ''\n      },\n      workingTimeData: {\n        start: '',\n        end: '',\n        user_id: ''\n      },\n      userId: '',\n      workingTime_id: null,\n      userExists: false,\n      // Ajout d'une variable pour suivre si l'utilisateur existe\n      email: '',\n      // Variable pour stocker l'e-mail de l'utilisateur\n      username: '',\n      // Variable pour stocker le nom d'utilisateur de l'utilisateur\n      showErrorMessage: false,\n      isEditing: false,\n      startDay: null\n    };\n  },\n  computed: {},\n  methods: {\n    handel_change() {\n      this.isEditing = true;\n    },\n    async createClock(user_id) {\n      try {\n        const currentDate = moment().tz('Europe/Paris');\n        const data = {\n          time: currentDate\n        };\n        console.log(data);\n        const response = await axios.post(`http://localhost:4000/api/clocks/${user_id}`, {\n          clock: data\n        });\n        console.log('Clock créée avec succès:', response.data);\n      } catch (error) {\n        console.error('Erreur lors de la création de la clock :', error);\n      }\n    },\n    badgeClick() {\n      const today = moment().format('YYYY-MM-DD H:mm');\n      nbClick += 1;\n      if (nbClick == 1) {\n        this.createClock(this.userId);\n        this.startDay = today;\n        this.workingTimeData.start = this.startDay;\n        this.workingTimeData.user_id = this.userId;\n        this.workingTimeData.end = \"2023-10-30T16:34:00Z\";\n        console.log(this.workingTimeData);\n        axios.post(`http://localhost:4000/api/working_times/${this.userId}`, {\n          working_time: this.workingTimeData\n        }).then(response => {\n          //  //Traitement à effectuer après la création du working time\n          const workingTimeId = response.data.id;\n          console.log('Working time créé avec succès:', response.data);\n          this.workingTime_id = workingTimeId;\n        }).catch(error => {\n          console.error('Erreur lors de la création du working time :', error);\n        });\n      }\n      if (nbClick == 2) {\n        this.createClock(this.userId);\n        this.workingTimeData.end = today;\n        console.log(this.workingTime_id);\n\n        //JE DOIS RECUPERER L'ID DE WORKING TIME ET LE PASSER EN PARAM\n        axios.put(`http://localhost:4000/api/working_times/${this.workingTime_id}`, {\n          working_time: this.workingTimeData\n        }).then(response => {\n          //Traitement à effectuer après la création du working time\n          console.log('Working time créé avec succès:', response.data);\n        }).catch(error => {\n          console.error('Erreur lors de la création du working time :', error);\n        });\n        nbClick = 0;\n      }\n    },\n    async getWorkingTimes() {\n      try {\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\n        const response = await axios.get(`http://localhost:4000/api/working_times/${this.userId}`);\n        this.workingTimeData = response.data;\n        console.log(this.workingTimeData);\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la récupération des temps de travail :', error);\n      }\n    },\n    async createUser() {\n      try {\n        let dataUser = this.user;\n        // Effectuer une requête POST pour créer un nouvel utilisateur\n        const response = await axios.post('http://localhost:4000/api/users', {\n          \"user\": dataUser\n        });\n        console.log('Utilisateur créé avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après la création de l'utilisateur ici\n        this.user = '';\n      } catch (error) {\n        console.error('Erreur lors de la création de l\\'utilisateur :', error);\n      }\n    },\n    formattedDate(date) {\n      return moment(date).format('DD-MM-YYYY H:mm');\n    },\n    async getClock() {\n      try {\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\n        const response = await axios.get(`http://localhost:4000/api/clocks/${this.userId}`);\n        this.clocks = response.data;\n\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la récupération des temps de travail :', error);\n      }\n    },\n    async editUser(id) {\n      try {\n        const dataToUpdate = {\n          email: this.formData.email,\n          username: this.formData.username\n        };\n\n        // Effectuer une requête PUT pour mettre à jour l'utilisateur existant\n        const response = await axios.put(`http://localhost:4000/api/users/${id}`, {\n          user: dataToUpdate\n        });\n        console.log('Utilisateur mis à jour avec succès :', response.data);\n        // Mettez en œuvre la logique nécessaire après la mise à jour de l'utilisateur ici\n        this.isEditing = false;\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour de l\\'utilisateur :', error);\n      }\n    },\n    async getUser() {\n      try {\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\n        const response = await axios.get(`http://localhost:4000/api/users/${this.userId}`);\n        console.log('Détails de l\\'utilisateur récupérés avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails de l\\'utilisateur :', error);\n      }\n    },\n    async supprimerUser(id) {\n      try {\n        if (confirm(\"Veuillez confirmer votre suppression\")) {\n          // Effectuer une requête DELETE pour supprimer l'utilisateur\n          const response = await axios.delete(`http://localhost:4000/api/users/${id}`);\n          console.log('Utilisateur supprimé avec succès:', response.data);\n          this.userExists = false;\n\n          // Mettez en œuvre la logique nécessaire après la suppression de l'utilisateur ici\n        }\n      } catch (error) {\n        console.error('Erreur lors de la suppression de l\\'utilisateur :', error);\n      }\n    },\n    async submitUser() {\n      const email = this.formData.email;\n      const username = this.formData.username;\n      try {\n        // Effectuez une requête à l'API pour vérifier si l'utilisateur existe\n        const response = await axios.get(`http://localhost:4000/api/users?email=${email}&username=${username}`);\n        if (response.data) {\n          this.userExists = true;\n          this.email = email;\n          this.username = username;\n          this.showErrorMessage = false;\n          // Récupérer l'ID de l'utilisateur\n          this.userId = response.data.id;\n          this.getUser();\n          this.getClock();\n        } else {\n          this.userExists = false;\n          this.showErrorMessage = true;\n          // L'utilisateur n'existe pas dans la base de données\n          console.log(response.data);\n        }\n      } catch (error) {\n        this.userExists = false;\n        this.showErrorMessage = true;\n      }\n    }\n  }\n};","map":{"version":3,"names":["nbClick","moment","axios","onMounted","bootstrap","window","myModal","setup","Modal","document","getElementById","showModel","console","log","show","name","data","formData","email","username","user","idUser","time","status","user_id","clocks","workingTimeData","start","end","userId","workingTime_id","userExists","showErrorMessage","isEditing","startDay","computed","methods","handel_change","createClock","currentDate","tz","response","post","clock","error","badgeClick","today","format","working_time","then","workingTimeId","id","catch","put","getWorkingTimes","get","createUser","dataUser","formattedDate","date","getClock","editUser","dataToUpdate","getUser","supprimerUser","confirm","delete","submitUser"],"sources":["C:\\Users\\ASUS\\dashboard\\src\\components\\GestionUtilisateurs.vue"],"sourcesContent":["<template>\r\n  <!-- Contenu du composant Utilisateur ici -->\r\n  <div class=\"home-page\">\r\n\r\n    <div class=\"navbar\">\r\n      <div class=\"container\">\r\n        <router-link to=\"/\" class=\"nav-link\" exact>\r\n          Dashboard\r\n        </router-link>\r\n        <router-link to=\"/orders\" class=\"nav-link\">\r\n          Orders\r\n        </router-link>\r\n        <router-link to=\"/products\" class=\"nav-link\">\r\n          Products\r\n        </router-link>\r\n        <router-link to=\"/customers\" class=\"nav-link\">\r\n          Customers\r\n        </router-link>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"container mt-4\" v-if=\"!userExists\">\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-6\">\r\n          <h2 class=\"text-center\"> Connexion </h2>\r\n          <form @submit.prevent=\"submitUser\">\r\n            <div class=\"user-form\">\r\n              <div class=\"form-group\">\r\n                <label for=\"email\">Email :</label>\r\n                <input type=\"email\" id=\"email\" v-model=\"formData.email\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"username\">Nom d'utilisateur :</label>\r\n                <input type=\"text\" id=\"username\" v-model=\"formData.username\" required>\r\n              </div>\r\n              <button  type=\"submit\">Récupérer les données utilisateur</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div class=\"col-6\" >\r\n          <h2 class=\"text-center\"> Inscription </h2>\r\n          <form class=\"  mx-auto user-form\">\r\n            <div class=\"form-group\">\r\n              <label for=\"email\">Email :</label>\r\n              <input type=\"email\" class=\"form-control\" id=\"email\" v-model=\"user.email\" placeholder=\" entre votre email \"/>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"email\">Nom :</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"nom\" v-model=\"user.username\"  placeholder=\" entre votre nom \"/>\r\n            </div>\r\n            <div class=\"form-group \">\r\n              <button class=\"btn btn-success w-100\" type=\"button\" @click=\"createUser()\">Creation</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"userExists\" class=\"user-info\">\r\n      <div class=\"container\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h2 class=\"text-center\">Informations de l'utilisateur </h2>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table table-bordered mt-3 text-center\">\r\n              <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Nom d'utilisateur </th>\r\n                <th>Email</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td>{{ userId }}</td>\r\n                <td>{{ formData.username }}</td>\r\n                <td>{{ formData.email }}</td>\r\n                <td class=\"d-flex  justify-content-center gap-3 \">\r\n                  <!--                  <RouterLink :to=\"{path:'/users/'+userId+'/edit'}\" class=\"btn btn-success\" >Modifier</RouterLink>-->\r\n                  <button @click=\"badgeClick()\" class=\"btn btn-success\">Je Badge !</button>\r\n                  <button type=\"button\" @click=\"showModel\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">Modifier</button>\r\n                  <button @click=\"supprimerUser(this.userId)\" class=\"btn btn-danger\">Supprimer</button>\r\n                </td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"userExists\" class=\"user-info\">\r\n      <div class=\"container\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h2 class=\"text-center\">Votre journée </h2>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table table-bordered mt-3 text-center\">\r\n              <thead>\r\n              <tr>\r\n                <th>Temps </th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n\r\n              <tr v-for=\"(clock, index) in this.clocks\" :key=\"index\">\r\n                <td>{{ formattedDate(clock.time) }}</td>\r\n              </tr>\r\n\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <button class=\"btn btn-info\" type=\"button\" @click=\"this.getWorkingTimes\"> Voir mes Working Times</button>\r\n      <div class=\"container\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h2 class=\"text-center\">Vos working times</h2>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table table-bordered mt-3 text-center\">\r\n              <thead>\r\n              <tr>\r\n                <th>Début</th>\r\n                <th>Fin</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr v-for=\"(working, index) in this.workingTimeData\" :key=\"index\">\r\n                <td>{{ working.start}}</td>\r\n                <td>{{ working.end }}</td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"user-info\" v-if=\"showErrorMessage\">\r\n      <p>L'utilisateur n'existe pas dans la base de données.</p>\r\n    </div>\r\n\r\n\r\n\r\n\r\n    <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"staticBackdropLabel\">Modifier l'utilisateur</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form >\r\n              <div class=\"user-form\">\r\n                <div class=\"form-group\">\r\n                  <label for=\"email\">Email :</label>\r\n                  <input type=\"email\" id=\"email\" v-model=\"formData.email\" required>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"username\">Nom d'utilisateur :</label>\r\n                  <input type=\"text\" id=\"username\" v-model=\"formData.username\" required>\r\n                </div>\r\n                <button class=\"btn btn-info\" type=\"button\" @click=\"editUser(this.userId)\" data-bs-dismiss=\"modal\" aria-label=\"Close\">Modifier </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n\r\nlet nbClick =0 ;\r\n\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport 'moment-timezone';\r\nimport { onMounted } from 'vue';\r\nimport * as bootstrap from 'bootstrap';\r\nimport 'bootstrap';\r\nwindow.bootstrap = bootstrap;\r\nlet myModal;\r\n\r\nexport default {\r\n  setup() {\r\n\r\n    onMounted(() => {\r\n      myModal = new bootstrap.Modal(document.getElementById('staticBackdrop'));\r\n    });\r\n\r\n    const showModel = () => {\r\n      console.log(\"tes\");\r\n      myModal.show();\r\n    };\r\n\r\n    return {\r\n      // ...autres variables et méthodes que vous retournez\r\n      showModel\r\n    };\r\n  },\r\n  name: 'GestionUtilisateurs',\r\n\r\n  data() {\r\n    return {\r\n      formData: {\r\n        email: '',\r\n        username: '',\r\n      },\r\n      user: {\r\n        email: '',\r\n        username: '',\r\n        idUser: '',\r\n      },\r\n      data: {\r\n        time: '',\r\n        status: '',\r\n        user_id: '',\r\n      },\r\n      clocks: {\r\n        time: '',\r\n        status: '',\r\n        user_id: '',\r\n      },\r\n      workingTimeData: {\r\n        start: '',\r\n        end: '',\r\n        user_id: ''\r\n      },\r\n\r\n      userId: '',\r\n      workingTime_id: null,\r\n      userExists: false, // Ajout d'une variable pour suivre si l'utilisateur existe\r\n      email: '', // Variable pour stocker l'e-mail de l'utilisateur\r\n      username: '', // Variable pour stocker le nom d'utilisateur de l'utilisateur\r\n      showErrorMessage: false,\r\n      isEditing: false,\r\n      startDay: null,\r\n    };\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    handel_change() {\r\n      this.isEditing = true\r\n    },\r\n\r\n    async createClock(user_id) {\r\n      try {\r\n        const currentDate = moment().tz('Europe/Paris');\r\n        const data = {\r\n          time: currentDate,\r\n        }\r\n        console.log(data);\r\n        const response = await axios.post(`http://localhost:4000/api/clocks/${user_id}`, {clock: data});\r\n        console.log('Clock créée avec succès:', response.data);\r\n      } catch (error) {\r\n        console.error('Erreur lors de la création de la clock :', error);\r\n      }\r\n    },\r\n\r\n    badgeClick() {\r\n      const today = moment().format('YYYY-MM-DD H:mm');\r\n      nbClick += 1;\r\n\r\n      if (nbClick == 1) {\r\n        this.createClock(this.userId);\r\n        this.startDay = today;\r\n        this.workingTimeData.start = this.startDay\r\n        this.workingTimeData.user_id = this.userId\r\n        this.workingTimeData.end = \"2023-10-30T16:34:00Z\"\r\n        console.log(this.workingTimeData)\r\n\r\n        axios.post(`http://localhost:4000/api/working_times/${this.userId}`, {working_time: this.workingTimeData})\r\n            .then(response => {\r\n              //  //Traitement à effectuer après la création du working time\r\n              const workingTimeId = response.data.id;\r\n              console.log('Working time créé avec succès:', response.data);\r\n              this.workingTime_id = workingTimeId;\r\n            }).catch(error => {\r\n          console.error('Erreur lors de la création du working time :', error);\r\n        });\r\n      }\r\n      if (nbClick == 2) {\r\n        this.createClock(this.userId);\r\n        this.workingTimeData.end = today\r\n        console.log(this.workingTime_id)\r\n\r\n\r\n        //JE DOIS RECUPERER L'ID DE WORKING TIME ET LE PASSER EN PARAM\r\n        axios.put(`http://localhost:4000/api/working_times/${this.workingTime_id}`, {working_time: this.workingTimeData})\r\n            .then(response => {\r\n              //Traitement à effectuer après la création du working time\r\n              console.log('Working time créé avec succès:', response.data);\r\n            }).catch(error => {\r\n          console.error('Erreur lors de la création du working time :', error);\r\n        });\r\n        nbClick =0;\r\n      }\r\n\r\n\r\n    },\r\n\r\n    async getWorkingTimes() {\r\n      try {\r\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\r\n        const response = await axios.get(`http://localhost:4000/api/working_times/${this.userId}`);\r\n        this.workingTimeData = response.data;\r\n        console.log(this.workingTimeData)\r\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des temps de travail :', error);\r\n      }\r\n    },\r\n\r\n\r\n    async createUser() {\r\n      try {\r\n        let dataUser = this.user;\r\n        // Effectuer une requête POST pour créer un nouvel utilisateur\r\n        const response = await axios.post('http://localhost:4000/api/users', {\"user\": dataUser})\r\n        console.log('Utilisateur créé avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la création de l'utilisateur ici\r\n        this.user = ''\r\n      } catch (error) {\r\n        console.error('Erreur lors de la création de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n\r\n    formattedDate(date) {\r\n      return moment(date).format('DD-MM-YYYY H:mm');\r\n    },\r\n\r\n    async getClock() {\r\n      try {\r\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\r\n        const response = await axios.get(`http://localhost:4000/api/clocks/${this.userId}`);\r\n        this.clocks = response.data;\r\n\r\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des temps de travail :', error);\r\n      }\r\n    },\r\n\r\n    async editUser(id) {\r\n      try {\r\n        const dataToUpdate = {\r\n          email: this.formData.email,\r\n          username: this.formData.username,\r\n        };\r\n\r\n        // Effectuer une requête PUT pour mettre à jour l'utilisateur existant\r\n        const response = await axios.put(`http://localhost:4000/api/users/${id}`, {user: dataToUpdate});\r\n\r\n        console.log('Utilisateur mis à jour avec succès :', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la mise à jour de l'utilisateur ici\r\n        this.isEditing = false;\r\n      } catch (error) {\r\n        console.error('Erreur lors de la mise à jour de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n\r\n    async getUser() {\r\n      try {\r\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\r\n        const response = await axios.get(`http://localhost:4000/api/users/${this.userId}`);\r\n        console.log('Détails de l\\'utilisateur récupérés avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des détails de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n\r\n    async supprimerUser(id) {\r\n\r\n\r\n      try {\r\n        if (confirm(\"Veuillez confirmer votre suppression\")) {\r\n          // Effectuer une requête DELETE pour supprimer l'utilisateur\r\n          const response = await axios.delete(`http://localhost:4000/api/users/${id}`);\r\n          console.log('Utilisateur supprimé avec succès:', response.data);\r\n          this.userExists = false;\r\n\r\n          // Mettez en œuvre la logique nécessaire après la suppression de l'utilisateur ici\r\n\r\n        }\r\n      }  catch (error) {\r\n        console.error('Erreur lors de la suppression de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n\r\n\r\n    async submitUser() {\r\n      const email = this.formData.email;\r\n      const username = this.formData.username;\r\n      try {\r\n        // Effectuez une requête à l'API pour vérifier si l'utilisateur existe\r\n        const response = await axios.get(`http://localhost:4000/api/users?email=${email}&username=${username}`);\r\n\r\n        if (response.data) {\r\n          this.userExists = true;\r\n          this.email = email;\r\n          this.username = username;\r\n          this.showErrorMessage = false;\r\n          // Récupérer l'ID de l'utilisateur\r\n          this.userId = response.data.id;\r\n\r\n          this.getUser();\r\n          this.getClock();\r\n        } else {\r\n          this.userExists = false;\r\n          this.showErrorMessage = true;\r\n          // L'utilisateur n'existe pas dans la base de données\r\n          console.log(response.data);\r\n        }\r\n      } catch (error) {\r\n        this.userExists = false;\r\n        this.showErrorMessage = true;\r\n      }\r\n    },\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Styles pour la page d'accueil */\r\n\r\n/* Style pour la barre de navigation */\r\n.navbar {\r\n  background-color: beige;\r\n  padding: 15px 0; /* Ajoutez un espace autour du texte dans la navbar */\r\n  width: 100%; /* Faites en sorte que la navbar occupe toute la largeur de son conteneur */\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Ajoute une légère ombre */\r\n}\r\n\r\n/* Style pour les liens dans la navbar */\r\n.navbar a {\r\n  margin: 0 20px; /* Ajoute un espace entre chaque lien */\r\n  color: black; /* Couleur du texte des liens */\r\n  text-decoration: none; /* Supprime la soulignement des liens */\r\n  font-weight: bold; /* Mettez en gras le texte des liens */\r\n  font-size: 1.2rem; /* Taille de la police des liens */\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/* Changez la couleur du texte des liens au survol */\r\n.navbar a:hover {\r\n  color: darkred; /* Couleur du texte des liens au survol */\r\n}\r\n\r\n\r\n\r\n/* Vos autres styles restants... */\r\n\r\n/* Style pour le formulaire utilisateur */\r\n.user-form {\r\n  max-width: 400px;\r\n  margin: 20px auto;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n  background-color: #fff;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-form .form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.user-form .form-group label {\r\n  display: block;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.user-form .form-group input[type=\"email\"],\r\n.user-form .form-group input[type=\"text\"] {\r\n  width: calc(100% - 20px);\r\n  padding: 8px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.user-form button[type=\"submit\"] {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.user-form button[type=\"submit\"]:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}