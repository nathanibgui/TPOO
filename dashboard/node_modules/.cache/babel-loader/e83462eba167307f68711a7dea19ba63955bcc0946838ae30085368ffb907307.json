{"ast":null,"code":"import moment from 'moment';\nimport axios from 'axios';\nexport default {\n  name: 'GestionUtilisateurs',\n  data() {\n    return {\n      selected: this.$route.params.city || '',\n      // Utilisez le paramètre de l'URL comme valeur initiale\n      formData: {\n        email: '',\n        username: ''\n      },\n      userId: 1,\n      userExists: false,\n      // Ajout d'une variable pour suivre si l'utilisateur existe\n      email: '',\n      // Variable pour stocker l'e-mail de l'utilisateur\n      username: '',\n      // Variable pour stocker le nom d'utilisateur de l'utilisateur\n      showErrorMessage: false,\n      options: ['Paris', 'Nice', 'Barcelone'],\n      meteoDonnee: null\n    };\n  },\n  computed: {\n    formattedDate() {\n      return moment().locale('fr').format('LL');\n    }\n  },\n  methods: {\n    async createUser() {\n      try {\n        // Effectuer une requête POST pour créer un nouvel utilisateur\n        const response = await axios.post('http://localhost:4000/api/users', this.formData);\n        console.log('Utilisateur créé avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après la création de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la création de l\\'utilisateur :', error);\n      }\n    },\n    async updateUser() {\n      try {\n        // Effectuer une requête PUT pour mettre à jour l'utilisateur existant\n        const response = await axios.put(`http://localhost:4000/api/users/${userId}`, this.formData);\n        console.log('Utilisateur mis à jour avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après la mise à jour de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour de l\\'utilisateur :', error);\n      }\n    },\n    async getUser() {\n      try {\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\n        const response = await axios.get(`http://localhost:4000/api/users/${userId}`);\n        console.log('Détails de l\\'utilisateur récupérés avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la récupération des détails de l\\'utilisateur :', error);\n      }\n    },\n    async supprimerUser() {\n      try {\n        // Effectuer une requête DELETE pour supprimer l'utilisateur\n        const response = await axios.delete(`http://localhost:4000/api/users/${userId}`);\n        console.log('Utilisateur supprimé avec succès:', response.data);\n        // Mettez en œuvre la logique nécessaire après la suppression de l'utilisateur ici\n      } catch (error) {\n        console.error('Erreur lors de la suppression de l\\'utilisateur :', error);\n      }\n    },\n    async submitUser() {\n      const email = this.formData.email;\n      const username = this.formData.username;\n      try {\n        // Effectuez une requête à l'API pour vérifier si l'utilisateur existe\n        const response = await axios.get(`http://localhost:4000/api/users?email=${email}&username=${username}`);\n        if (response.data) {\n          this.userExists = true;\n          this.email = email;\n          this.username = username;\n          this.showErrorMessage = false;\n        } else {\n          this.userExists = false;\n          this.showErrorMessage = true;\n          // L'utilisateur n'existe pas dans la base de données\n          console.log(response.data);\n        }\n      } catch (error) {\n        this.userExists = false;\n        this.showErrorMessage = true;\n      }\n    },\n    fetchData() {\n      const requestUrl = 'https://api.openweathermap.org/data/2.5/weather?lat=44.34&lon=10.99&appid=4dcc2218a9bf517e2c98a9da0ca721cd';\n\n      // Fonction de réussite (resolveCallback) en gros response est un objet ou tout est stocke il faut utiliser\n      // un systeme de .data pour recuperer les données\n\n      const resolveCallback = response => {\n        // Traite les données de la réponse ici\n        console.log(response.data);\n      };\n\n      // Fonction d'échec (rejectCallback)\n      const rejectCallback = error => {\n        console.error('Erreur lors de la requête :', error);\n      };\n\n      // Effectuer la requête Axios avec les callbacks de réussite et d'échec\n      axios.get(requestUrl).then(resolveCallback, rejectCallback);\n    },\n    search(ville) {\n      // Logique de recherche avec la ville ici (par exemple, appel à une API)\n      // Mettez à jour votre composant avec les résultats de la recherche\n\n      // Dans cet exemple, générons une température aléatoire entre 1 et 32\n      const randomTemperature = Math.floor(Math.random() * 32) + 1;\n      switch (ville) {\n        case 'Paris':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        case 'Nice':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        case 'Barcelone':\n          this.meteoDonnee = {\n            temperature: randomTemperature,\n            city: ville\n          }; // Remplacez cela par les données réelles\n          break;\n        default:\n          this.meteoDonnee = null;\n      }\n    }\n  },\n  watch: {\n    '$route.params.city': function (newCity) {\n      this.selected = newCity || ''; // Mettez à jour la ville sélectionnée lorsque le paramètre de l'URL change\n      this.search(newCity); // Effectuez la recherche avec la nouvelle ville\n    }\n  }\n};","map":{"version":3,"names":["moment","axios","name","data","selected","$route","params","city","formData","email","username","userId","userExists","showErrorMessage","options","meteoDonnee","computed","formattedDate","locale","format","methods","createUser","response","post","console","log","error","updateUser","put","getUser","get","supprimerUser","delete","submitUser","fetchData","requestUrl","resolveCallback","rejectCallback","then","search","ville","randomTemperature","Math","floor","random","temperature","watch","$route.params.city","newCity"],"sources":["C:\\Users\\ASUS\\dashboard\\src\\components\\GestionUtilisateurs.vue"],"sourcesContent":["<template>\r\n  <!-- Contenu du composant Utilisateur ici -->\r\n  <div class=\"home-page\">\r\n\r\n    <div class=\"navbar\">\r\n      <div class=\"container\">\r\n        <router-link to=\"/\" class=\"nav-link\" exact>\r\n          Dashboard\r\n        </router-link>\r\n        <router-link to=\"/orders\" class=\"nav-link\">\r\n          Orders\r\n        </router-link>\r\n        <router-link to=\"/products\" class=\"nav-link\">\r\n          Products\r\n        </router-link>\r\n        <router-link to=\"/customers\" class=\"nav-link\">\r\n          Customers\r\n        </router-link>\r\n      </div>\r\n\r\n      <h2 v-if=\"userExists\">Bonjour : {{ userExists }}</h2>\r\n    </div>\r\n\r\n    <div class=\"container mt-4\">\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-md-9\">\r\n          <!-- Votre formulaire ici -->\r\n          <form @submit.prevent=\"submitUser\">\r\n            <div class=\"user-form\">\r\n              <div class=\"form-group\">\r\n                <label for=\"email\">Email :</label>\r\n                <input type=\"email\" id=\"email\" v-model=\"formData.email\" required>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"username\">Nom d'utilisateur :</label>\r\n                <input type=\"text\" id=\"username\" v-model=\"formData.username\" required>\r\n              </div>\r\n              <button type=\"submit\">Récupérer les données utilisateur</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"userExists\" class=\"user-info\">\r\n      <h2>Informations de l'utilisateur :</h2>\r\n      <p>Email : {{ email }}</p>\r\n      <p>Nom d'utilisateur : {{ username }}</p>\r\n    </div>\r\n    <div class=\"user-info\" v-if=\"showErrorMessage\">\r\n      <p>L'utilisateur n'existe pas dans la base de données.</p>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default {\r\n  name: 'GestionUtilisateurs',\r\n  data() {\r\n    return {\r\n      selected: this.$route.params.city || '', // Utilisez le paramètre de l'URL comme valeur initiale\r\n      formData:{\r\n        email:'',\r\n        username:'',\r\n      },\r\n      userId: 1,\r\n      userExists: false, // Ajout d'une variable pour suivre si l'utilisateur existe\r\n      email: '', // Variable pour stocker l'e-mail de l'utilisateur\r\n      username: '', // Variable pour stocker le nom d'utilisateur de l'utilisateur\r\n      showErrorMessage:false,\r\n      options: ['Paris', 'Nice', 'Barcelone'],\r\n      meteoDonnee: null\r\n    };\r\n  },\r\n  computed: {\r\n    formattedDate() {\r\n      return moment().locale('fr').format('LL');\r\n    },\r\n  },\r\n  methods: {\r\n    async createUser() {\r\n      try {\r\n        // Effectuer une requête POST pour créer un nouvel utilisateur\r\n        const response = await axios.post('http://localhost:4000/api/users', this.formData);\r\n        console.log('Utilisateur créé avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la création de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la création de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    async updateUser() {\r\n      try {\r\n        // Effectuer une requête PUT pour mettre à jour l'utilisateur existant\r\n        const response = await axios.put(`http://localhost:4000/api/users/${userId}`, this.formData);\r\n        console.log('Utilisateur mis à jour avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la mise à jour de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la mise à jour de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    async getUser() {\r\n      try {\r\n        // Effectuer une requête GET pour obtenir les détails de l'utilisateur\r\n        const response = await axios.get(`http://localhost:4000/api/users/${userId}`);\r\n        console.log('Détails de l\\'utilisateur récupérés avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après avoir obtenu les détails de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des détails de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    async supprimerUser() {\r\n      try {\r\n        // Effectuer une requête DELETE pour supprimer l'utilisateur\r\n        const response = await axios.delete(`http://localhost:4000/api/users/${userId}`);\r\n        console.log('Utilisateur supprimé avec succès:', response.data);\r\n        // Mettez en œuvre la logique nécessaire après la suppression de l'utilisateur ici\r\n      } catch (error) {\r\n        console.error('Erreur lors de la suppression de l\\'utilisateur :', error);\r\n      }\r\n    },\r\n    async submitUser() {\r\n      const email = this.formData.email;\r\n      const username = this.formData.username;\r\n      try {\r\n        // Effectuez une requête à l'API pour vérifier si l'utilisateur existe\r\n        const response = await axios.get(`http://localhost:4000/api/users?email=${email}&username=${username}`);\r\n\r\n        if (response.data) {\r\n          this.userExists = true;\r\n          this.email=email;\r\n          this.username=username;\r\n          this.showErrorMessage = false;\r\n        }\r\n        else {\r\n          this.userExists = false;\r\n          this.showErrorMessage = true;\r\n          // L'utilisateur n'existe pas dans la base de données\r\n          console.log(response.data);\r\n        }\r\n      } catch (error) {\r\n        this.userExists = false;\r\n        this.showErrorMessage = true;\r\n      }\r\n    },\r\n    fetchData() {\r\n      const requestUrl = 'https://api.openweathermap.org/data/2.5/weather?lat=44.34&lon=10.99&appid=4dcc2218a9bf517e2c98a9da0ca721cd';\r\n\r\n      // Fonction de réussite (resolveCallback) en gros response est un objet ou tout est stocke il faut utiliser\r\n      // un systeme de .data pour recuperer les données\r\n\r\n      const resolveCallback = response => {\r\n        // Traite les données de la réponse ici\r\n        console.log(response.data);\r\n      };\r\n\r\n      // Fonction d'échec (rejectCallback)\r\n      const rejectCallback = error => {\r\n        console.error('Erreur lors de la requête :', error);\r\n      };\r\n\r\n      // Effectuer la requête Axios avec les callbacks de réussite et d'échec\r\n      axios.get(requestUrl).then(resolveCallback, rejectCallback);\r\n\r\n    },\r\n    search(ville) {\r\n      // Logique de recherche avec la ville ici (par exemple, appel à une API)\r\n      // Mettez à jour votre composant avec les résultats de la recherche\r\n\r\n      // Dans cet exemple, générons une température aléatoire entre 1 et 32\r\n      const randomTemperature = Math.floor(Math.random() * 32) + 1;\r\n\r\n      switch (ville) {\r\n        case 'Paris':\r\n          this.meteoDonnee = { temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        case 'Nice':\r\n          this.meteoDonnee = {temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        case 'Barcelone':\r\n          this.meteoDonnee = { temperature: randomTemperature, city: ville }; // Remplacez cela par les données réelles\r\n          break;\r\n        default:\r\n          this.meteoDonnee = null;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    '$route.params.city': function(newCity) {\r\n      this.selected = newCity || ''; // Mettez à jour la ville sélectionnée lorsque le paramètre de l'URL change\r\n      this.search(newCity); // Effectuez la recherche avec la nouvelle ville\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Styles pour la page d'accueil */\r\n\r\n/* Style pour la barre de navigation */\r\n.navbar {\r\n  background-color: beige;\r\n  padding: 15px 0; /* Ajoutez un espace autour du texte dans la navbar */\r\n  width: 100%; /* Faites en sorte que la navbar occupe toute la largeur de son conteneur */\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Ajoute une légère ombre */\r\n}\r\n\r\n/* Style pour les liens dans la navbar */\r\n.navbar a {\r\n  margin: 0 20px; /* Ajoute un espace entre chaque lien */\r\n  color: black; /* Couleur du texte des liens */\r\n  text-decoration: none; /* Supprime la soulignement des liens */\r\n  font-weight: bold; /* Mettez en gras le texte des liens */\r\n  font-size: 1.2rem; /* Taille de la police des liens */\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/* Changez la couleur du texte des liens au survol */\r\n.navbar a:hover {\r\n  color: darkred; /* Couleur du texte des liens au survol */\r\n}\r\n\r\n/* Style pour la barre latérale */\r\n.sidebar {\r\n  background-color: #ffffff;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 5px;\r\n  width: 250px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n\r\n\r\n/* Vos autres styles restants... */\r\n\r\n/* Style pour le formulaire utilisateur */\r\n.user-form {\r\n  max-width: 400px;\r\n  margin: 20px auto;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 10px;\r\n  text-align: center;\r\n  background-color: #fff;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.user-form .form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.user-form .form-group label {\r\n  display: block;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.user-form .form-group input[type=\"email\"],\r\n.user-form .form-group input[type=\"text\"] {\r\n  width: calc(100% - 20px);\r\n  padding: 8px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.user-form button[type=\"submit\"] {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.user-form button[type=\"submit\"]:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}